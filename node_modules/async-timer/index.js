// Generated by CoffeeScript 1.10.0
(function() {
  var slice = [].slice;

  module.exports = function() {
    var measured, starts;
    starts = {};
    measured = {};
    return {

      /*
        start time [key]
        @param {string} key
       */
      start: function(key) {
        starts[key] = process.hrtime();
        measured[key] = null;
      },

      /*
        end time [key]
        @param {string} key
       */
      end: function(key) {
        var delta, start;
        if ((start = starts[key]) == null) {
          return;
        }
        delta = process.hrtime(start);
        measured[key] = Math.round((delta[0] * 1e9 + delta[1]) / 1e6);
      },

      /*
        wrap async call timing it as [key]
        @param {function(args..., callback)} task
        @param {string} key
        @return {function(args..., callback)}
       */
      wrap: function(task, key) {
        return (function(_this) {
          return function() {
            var args, i, next;
            args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
            _this.start(key);
            return task.apply(null, slice.call(args).concat([function() {
              _this.end(key);
              return next.apply(null, arguments);
            }]));
          };
        })(this);
      },

      /*
        get object of measured times
        @return {Object.<string, number>}
       */
      getMeasured: function() {
        return measured;
      }
    };
  };

}).call(this);
